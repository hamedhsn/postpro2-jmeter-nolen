'''
Created on 01-Nov-2013

@author: hsn
linux=/homes/hs302/Dropbox/Reading Stuff/0-MyPhD/2exp-tcpdump/5qmul/jmeter/sg/jmeterrow4/test/testsg100-ed.txt
windows=F:\\Dropbox\\Dropbox\\Reading Stuff\\0-MyPhD\\2exp-tcpdump\\5qmul\\sg\\2sg5th20e10qm-ed.txt
'''
import trafficanalysis
import threadbaselatency
import sav_dat_anls
# from cvs2svn_lib.rcs_stream import msplit
import sys
# from nose.sphinx.pluginopts import Opt


if __name__ == '__main__':

#     clifilepath='F:\\Dropbox\\Dropbox\\Reading Stuff\\0-MyPhD\\2exp-tcpdump\\5qmul\\jmeter\\sg\\jmeterrow4\\test\\testqm100-ed.txt'
#     serfilepath='F:\\Dropbox\\Dropbox\\Reading Stuff\\0-MyPhD\\2exp-tcpdump\\5qmul\\jmeter\\sg\\jmeterrow4\\test\\testsg100-ed.txt'
#     clifilepath='/homes/hs302/Dropbox/Reading Stuff/0-MyPhD/2exp-tcpdump/5qmul/jmeter/sg/jmeterrow4/test/jmet50th100opse20sec320qm2-ed.txt'
#     serfilepath='/homes/hs302/Dropbox/Reading Stuff/0-MyPhD/2exp-tcpdump/5qmul/jmeter/sg/jmeterrow4/test/jmet50th100opse20sec320sg-ed.txt'

#     clifilepath='/homes/hs302/Dropbox/Reading Stuff/0-MyPhD/2exp-tcpdump/5qmul/jmeter/sg/jmeterrow4/test/testqm100-ed.txt'
#     serfilepath='/homes/hs302/Dropbox/Reading Stuff/0-MyPhD/2exp-tcpdump/5qmul/jmeter/sg/jmeterrow4/test/testsg100-ed.txt'
    
    clifilepath='/home/fedora/fedvb/data/TEST/res/br/50th500opse2sec20testqm2brcli.txt'
    serfilepath='/home/fedora/fedvb/data/TEST/res/br/50th500opse2sec20testbrser.txt'

    cliname='planetlab2.nrl.eecs.qmul.ac.uk'
    #sername='planetlab02.sys.Virginia.EDU'
    sername='planetlab1.comp.nus.edu.sg' 

    intvl=1000

    '''' TRAFFFFFFFFFFFFIC SECTTTTTTTTTTTTTTTTTTTION'''    
    ''' cli->ser client side'''
#     his11=trafficanalysis.histreqstclient(intvl,"cli2ser",clifilepath,cliname,sername)
#     ''' cli->ser server side'''
#     his12=trafficanalysis.histreqstserver(intvl,"cli2ser",serfilepath,cliname,sername)
#     ''' ser->client client side'''
#     his21=trafficanalysis.histreqstclient(intvl,"ser",clifilepath,cliname,sername)
#     ''' ser->client server side'''
#     his22=trafficanalysis.histreqstserver(intvl,"ser",serfilepath,cliname,sername)
    
    ''' Plot Section '''
    xlbl="Time(sec)"
    ylbl="Traffic(Number of Requests) every msec"
#     trafficanalysis.plt_traf_hist(clifilepath,'h11',his11, intvl, 'Histogram of the traffic(requests) generated by client() node at client() side', xlbl, ylbl)
#     trafficanalysis.plt_traf_hist(serfilepath,'h12',his12, intvl, 'Histogram of the traffic(requests) generated by client() node at srver() side', xlbl, ylbl)
#     trafficanalysis.plt_traf_hist(clifilepath,'h21',his21, intvl, 'Histogram of the traffic(response) generated by server() node at client() side', xlbl, ylbl)
#     trafficanalysis.plt_traf_hist(serfilepath,'h22',his22, intvl, 'Histogram of the traffic(response) generated by server() node at server side', xlbl, ylbl)
#            
#     trafficanalysis.plt_traf_sndrecv(clifilepath,'h4',intvl, his11, his12, his21, his22)


    h22barboxplt=True
    h21barboxplt=True
    ''' Calculating the THREEEEEAD BASSSSSSSSSSED LATEEEEEEEEEEEEENCY'''    
    clirec,clithrs=threadbaselatency.thr_cli_lat(clifilepath,cliname,sername,[])                #Calculating the cassandra latency per thread
    serrec,serthrs=threadbaselatency.thr_serv_lat(serfilepath,cliname,sername,[])               #Calculating the server side latency per thread
#     clirec.sort(key=lambda x: x[1])
#     
#     print clirec
    '''Calculating the traffic'''
    newh11,newh12,newh21,newh22=sav_dat_anls.sav_trf_barplt(serthrs,serrec,clithrs,clirec,intvl)

    while(1):
        h22barboxplt=True
        h12barboxplt=False
        h21bbarboxplt=True
        h11barboxplt=False
        thrputbarboxpltcli=False
        thrputbarboxpltser=False
        print 'Please Select an option:'
        option=str(raw_input('1)Exit  2)boxplot with normal option(Server)  3)with more options(Server)  4)barplots  5)Threshold  6)boxplot with normal option(Client)  7)with more options(Client): '))
        if option=='1':
            break;
        elif (option in ['2','3','6','7']):
            if option=='3':
                if str(raw_input('Do you like to have the box and bar plot based on his22:'))=='y':
                    h22barboxplt=True
                else:
                    h22barboxplt=False
    
                if str(raw_input('Do you like to have the box and bar plot based on his12:'))=='y':
                    h12barboxplt=True
                else:
                    h12barboxplt=False
    
                if str(raw_input('Do you like to have the box and bar plot based on throughput(his12-his22):'))=='y':
                    thrputbarboxpltser=True
                else:
                    thrputbarboxpltser=False

            if option=='7':
                if str(raw_input('Do you like to have the box and bar plot based on his21:'))=='y':
                    h21barboxplt=True
                else:
                    h21barboxplt=False
    
                if str(raw_input('Do you like to have the box and bar plot based on his11:'))=='y':
                    h11barboxplt=True
                else:
                    h11barboxplt=False
    
                if str(raw_input('Do you like to have the box and bar plot based on throughput(his11-his21):'))=='y':
                    thrputbarboxpltcli=True
                else:
                    thrputbarboxpltcli=False
                            

            strtstring=str(raw_input('Enter Start:(d for default and 1 is the first):'))
            if strtstring=='d':
                strt=0
                end=len(newh22)-1 
                gap=0
            else:
                endflg=False
                strt=int(strtstring)
                end=int(str(raw_input('Enter End(end is '+str(len(newh22)-1)+'):')))
                gap=int(str(raw_input('Gap:')))
            
            ylim=str(raw_input('Yaxis:(d for default):'))
            if ylim=='d':
                ylimst=0
                if option in ['2','3']:
                    ylimen=max(newh22)
                if option in ['6','7']:
                    ylimen=max(newh21)

            else:
                ylimen=int(ylim)
                ylimst=0
            oldintvl=intvl
            strintvl=str(raw_input('Interval Value:(d for default(1000msec)):'))
            if strintvl=='d':
                intvl=1000
            else:
                intvl=int(strintvl)
                

            if (intvl!=oldintvl):
                '''Calculating the traffic'''
                newh11,newh12,newh21,newh22=sav_dat_anls.sav_trf_barplt(serthrs,serrec,clithrs,clirec,intvl)
                    
    
    
            '''Plot bar and boxplot'''
            sermstpltlst=sav_dat_anls.sav_ser_lat_boxplt(serfilepath,'boxplot',serthrs, serrec,intvl)
            climstpltlst=sav_dat_anls.sav_cli_lat_boxplt(clifilepath,'boxplot',clithrs, clirec,intvl)
    #         strt=0              #start from 0
    #         end=len(his22)-1    #end at len(his22)-1
    #         gap=0
    #         ylimst=0
    #         ylimen=250             #boundry of yaxis
            if strtstring=='d' and option=='2':
                end=len(newh22)-1
            if h22barboxplt and option in ['2','3']:
                sav_dat_anls.plt_serv_box_ser_lat(serfilepath,'Server',newh22,serfilepath,intvl,strt,end,gap,sermstpltlst,ylimst,ylimen)
            if h12barboxplt:
                if strtstring=='d':
                    end=len(newh12)-1
                sav_dat_anls.plt_serv_box_ser_lat(serfilepath,'Server',newh12,serfilepath,intvl,strt,end,gap,sermstpltlst,ylimst,ylimen)
            if thrputbarboxpltser:
                if strtstring=='d':
                    end=min(len(newh12),len(newh22))-1
                sav_dat_anls.plt_serv_box_ser_lat(serfilepath,'Server',map(int.__sub__, newh12, newh22),serfilepath,intvl,strt,end,gap,sermstpltlst,ylimst,ylimen)

            if strtstring=='d' and option=='6':
                end=len(newh21)-1
            if h21barboxplt and option in ['6','7']:
                sav_dat_anls.plt_serv_box_ser_lat(serfilepath,'Client',newh21,clifilepath,intvl,strt,end,gap,climstpltlst,ylimst,ylimen)
            if h11barboxplt:
                if strtstring=='d':
                    end=len(newh11)-1
                sav_dat_anls.plt_serv_box_ser_lat(serfilepath,'client',newh11,clifilepath,intvl,strt,end,gap,climstpltlst,ylimst,ylimen)
            if thrputbarboxpltcli:
                if strtstring=='d':
                    end=min(len(newh21),len(newh11))-1
                sav_dat_anls.plt_serv_box_ser_lat(serfilepath,'client',map(int.__sub__, newh21, newh11),clifilepath,intvl,strt,end,gap,climstpltlst,ylimst,ylimen)


        elif option=='4': 
            ''' Plot Section '''
            xlbl="Time(sec)"
            ylbl="Traffic(Number of Requests) every msec"
#             sav_dat_anls.plt_traf_hist(clifilepath,'h11',newh11, intvl, 'Histogram of the traffic(requests) generated by client() node at client() side', xlbl, ylbl)
#             sav_dat_anls.plt_traf_hist(serfilepath,'h12',newh12, intvl, 'Histogram of the traffic(requests) generated by client() node at srver() side', xlbl, ylbl)
#             sav_dat_anls.plt_traf_hist(clifilepath,'h21',newh21, intvl, 'Histogram of the traffic(response) generated by server() node at client() side', xlbl, ylbl)
#             sav_dat_anls.plt_traf_hist(serfilepath,'h22',newh22, intvl, 'Histogram of the traffic(response) generated by server() node at server side', xlbl, ylbl)
            sav_dat_anls.plt_traf_sndrecv(clifilepath,'h4',intvl, newh11, newh12, newh21, newh22)

        elif option=='5':
#             print newh11
            print 'Threshold at client:',max(newh21)
            print 'Threshold at server:',max(newh22)
#     print map(int.__sub__, his11, newh11)
#     print map(int.__sub__, his12, newh12)
#     print map(int.__sub__, his21, newh21)
#     print map(int.__sub__, his22, newh22)

    
    #sav_dat_anls.sav_ser_lat(serfilepath,'cdf',serthrs, serrec)
    #sav_dat_anls.sav_trf_cns(serfilepath,'trfc',his11,his12,his21,his22)
    
    #print "No of Threads:",len(clithrs)
    #print "client threads:",clithrs
    print len(his22),len(sermstpltlst)
    print "server threads:",serthrs


    threadbaselatency.serv_side_lat(serfilepath,'thrdser',serthrs, serrec)  #Server side latency
    threadbaselatency.cli_cass_lat(clifilepath,'thrdcli',clithrs, clirec)   #Cassandra Client Latency 
#     threadbaselatency.timeseri_int(clithrs, clifilepath) #Timeseries of the interval
    
    '''throughput and latency in one plot with 1 yaxis'''
#     SERVER SIDE
#     his=[]
#     for i in range(min(len(his12),len(his22))):
#         his.append(his12[i]-his22[i])
    threadbaselatency.cli_lat_thput(serfilepath,'diff50intvl',his22,serthrs, serrec, serfilepath, intvl,50,mstpltlst)
    #CLIENT SIDE
#     his=[]
#     for i in range(min(len(his12),len(his22))):
#         his.append(his12[i]-his22[i])
#     threadbaselatency.cli_lat_thput(clifilepath,'cmp50intvl',his22,clithrs, clirec, clifilepath, intvl,50)
    